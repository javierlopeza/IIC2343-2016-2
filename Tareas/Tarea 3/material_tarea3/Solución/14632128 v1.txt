DATA:
print	123h
I 	0
J 	0
K 	0

path	0
graph	0
		1
		0
		0
		0
		1
		0
		0
		0
size 	3
origin	1
end		3

indice_origin		0
indice_end			0
contador_general	0

sqrsize		0
sqrsize2	0
var1 		0
var2 		0 	
var3		0
var4		0
var5		0
i 			0

factor1		0
factor2		0
producto	0
parcial		0	

base					0
exponente 				0
resultado_potencia		0
ipot					0

size_squared	0



matriz2			0




CODE:

// ----- (1) -----

bloque1:
	// PRINT BLOQUE 1
	MOV A,Ah
	MOV (print),A

	//ind_origin = origin - 1
	MOV A,(origin)
	SUB A,1
	MOV (indice_origin),A

	//ind_end = end -1 
	MOV A,(end)
	SUB A,1
	MOV (indice_end),A

	//contador_general = size
	MOV A,(size)
	MOV (contador_general),A



// ----- (2) -----

bloque2:
	// PRINT BLOQUE 2
	MOV A,Bh
	MOV (print),A

	// Calcular cuadrado del size
	calcularcuadradosize: 
	MOV A,(size)
	MOV (sqrsize),A
	MOV B,A
	CMP A,1
	JEQ create
	sqra:
		MOV A,(sqrsize)
		ADD A,(size)
		MOV (sqrsize),A
		MOV A,B
		SUB A,1
		MOV B,A
		CMP A,1
		JNE sqra

	// Crear matriz2 nula
	crearmatriz2nula:
		MOV A,0
		MOV (i),A

		create:
			MOV B,matriz2
			ADD A,B
			MOV B,A
			MOV (B),0

			MOV A,(i)
			ADD A,1
			MOV (i),A
			CMP A,(sqrsize)
			JNE create

	// Copiar graph en matriz2
	copiar1en2:
		MOV A,0
		MOV (i),A

		copy:
			MOV B,matriz2
			ADD A,B
			MOV B,A
			MOV (var2),B

			MOV A,graph
			ADD A,(i)
			MOV B,A
			MOV B,(B)
			MOV A,B
			MOV B,(var2)
			MOV (B),A

			MOV A,(i)
			ADD A,1
			MOV (i),A
			CMP A,(sqrsize)
			JNE copy

JMP bloque3



// ----- (funciones) -----

funciones:
	
	multiplicar: 
		// Multiplica los valores en las direcciones 'factor1' y 'factor2' y guarda el resultado en 'producto'.
		// Limpiamos
		MOV A,0
		MOV (var1),A
		MOV (var2),A
		MOV (producto),A

		// Verificar Factores Distintos de 0
		MOV A,(factor1)
		CMP A,0
		JEQ endmultiplicar

		JMP initmult

		mult:
			MOV A,0
			MOV (parcial),A
			MOV (i),A

		startmult:
			MOV A,(parcial)
			ADD A,(var2)
			MOV (parcial),A
			MOV A,(i)
			ADD A,1
			MOV (i),A
			MOV B,(var1)
			CMP A,B
			JLT startmult
			NOP
			RET

		initmult:
			MOV A,(factor1)
			MOV (var1),A
			MOV A,(factor2)
			MOV (var2),A
			CALL mult
			MOV A, (producto)
			ADD A,(parcial)
			MOV (producto),A
			JMP endmultiplicar

		endmultiplicar:
			RET

	potencia:
		// Opera 'base'**'exponente' y guarda el resultado en 'resultado_potencia'.
		// Limpiamos
		MOV A,0
		MOV (factor1),A
		MOV (factor2),A
		MOV (producto),A
		MOV (var1),A
		MOV (var2),A
		MOV (parcial),A
		MOV (ipot),A
		MOV (resultado_potencia),A

		MOV A,(base)

		MOV B,(exponente)
		MOV (ipot),B

		// --- CASOS EXCEPCIONALES ---
		// Verificar base distinta de 1
		CMP A,1
		JEQ baseuno

		// Verificar exponente distinto de 0
		MOV A,B
		CMP A,0
		JEQ expcero

		// Verificar exponente distinto de 1
		CMP A,1
		JEQ expuno
		// -------------------------------

		// Pasamos los factores de la multiplicacion a la subrutina
		MOV A,(base)
		MOV (factor1),A
		MOV (factor2),A

		// Subrutina multiplicacion master

		multmaster:
			// Verificar factores distintos de 0
			MOV A,(factor1)
			CMP A,0
			JEQ endpot

			JMP initmultpot

		multpot:
			MOV A,0
			MOV (parcial),A
			MOV (i),A

		startmultpot:
			MOV A,(parcial)
			ADD A,(var2)
			MOV (parcial),A
			MOV A,(i)
			ADD A,1
			MOV (i),A
			MOV B,(var1)
			CMP A,B
			JLT startmultpot
			RET

		initmultpot:
			MOV A,(factor1)
			MOV (var1),A
			MOV A,(factor2)
			MOV (var2),A
			CALL multpot
			MOV A,(producto)
			ADD A,(parcial)
			MOV (producto),A
			MOV (resultado_potencia),A
		
		endmultpot:
			// Verificamos si la operacion de potencia esta terminada
			MOV A,(ipot)
			SUB A,1
			MOV (ipot),A
			CMP A,1
			JNE continuarpot	// Queda por potenciar
			CMP A,1
			JEQ endpot			// Potencia terminada

		// Preparamos los registros y factores para nueva multiplicacion
		continuarpot:
			MOV A,(base)
			MOV (factor1),A
			MOV A,(resultado_potencia)
			MOV (factor2),A
			MOV A,0
			MOV (producto),A
			JMP multmaster

		// --- Jumps de Casos Excepcionales ---
		baseuno:
			MOV A,1
			MOV (resultado_potencia),A
			JMP endpot

		expcero:
			MOV A,1
			MOV (resultado_potencia),A
			JMP endpot

		expuno:
			MOV A,(base)
			MOV (resultado_potencia),A
			JMP endpot
			// ----------------------

		endpot:
			RET



// ----- (3) ------

bloque3:
	// PRINT BLOQUE 3
	MOV A,Ch
	MOV (print),A

	// var3 = ind_origin*size
	MOV A,(indice_origin)
	MOV (factor1),A
	MOV A,(size)
	MOV (factor2),A
	CALL multiplicar
	MOV A,(producto)
	MOV (var3),A

	// var3 += ind_end
	MOV B,(indice_end)
	ADD A,B
	MOV (var3),A

	//var3 += dir graph
	MOV B,A
	MOV A,graph
	ADD A,B
	MOV (var3),A

	// if matriz2[var3] == 1: ...
	MOV B,(var3)
	MOV A,(B)
	CMP A,1
	JNE bloque4

	haypath:
		MOV A,1
		MOV (path),A
		JMP end



// ----- (4) ------

bloque4:
	// PRINT BLOQUE 4
	MOV A,Dh
	MOV (print),A
	NOP

	whilegeneral:
		// PRINT CONTADOR GENERAL
		MOV A,(contador_general)
		MOV (print),A

		// size_squared = potencia(size, 2)
		MOV A,(size)
		MOV (base),A
		MOV A,2
		MOV (exponente),A
		CALL potencia
		MOV A,(resultado_potencia)
		MOV (size_squared),A

		// Crear matriz3 nula
		crearmatriz3nula:
			MOV A,(size_squared)
			MOV (i),A
			MOV B,(size_squared)
			ADD (sqrsize2)
			MOV A,(i)
			crear3:
				MOV B,matriz2
				ADD A,B
				MOV B,A
				MOV (var2),B
				MOV A,graph
				SUB A,(size_squared)
				ADD A,(i)
				MOV B,A
				MOV B,(B)
				MOV A,B
				MOV B,(var2)
				MOV A,0
				MOV (B),A

				MOV A,(i)
				ADD A,1
				MOV (i),A
				CMP A,(sqrsize2)
				JNE crear3

		// I = size - 1
		MOV A,(size)
		SUB A,1
		MOV (I),A

		whileI:
			// J = size - 1
			MOV A,(size)
			SUB A,1
			MOV (J),A

			whileJ:
				// K = size - 1
				MOV A,(size)
				SUB A,1
				MOV (K),A

				whileK:
					// var3 = I * size
					MOV A,(I) // <----------------------
					MOV (factor1),A
					MOV A,(size)
					MOV (factor2),A
					CALL multiplicar
					MOV A,(producto)
					MOV (var3),A

					// var3 += K
					MOV B,(K)
					ADD A,B
					MOV (var3),A

					// var4 = var3
					MOV (var4),A

					// var3 = K * size
					MOV A,(K)
					MOV (factor1),A
					MOV A,(size)
					MOV (factor2),A
					CALL multiplicar
					MOV A,(producto)
					MOV (var3),A

					// var3 += J
					MOV B,(J)
					ADD A,B
					MOV (var3),A

					// factor1 = matriz2[var4]
						// var4 += dir matriz2
						MOV B,(var4)
						MOV A,matriz2
						ADD A,B
						MOV (var4),A
					MOV B,(var4)
					MOV A,(B)
					MOV (factor1),A

					// factor2 = graph[var3]
						// var3 += dir graph
						MOV B,(var3)
						MOV A,graph
						ADD A,B
						MOV (var3),A
					MOV B,(var3)
					MOV A,(B)
					MOV (factor2),A

					// var5 = multiplicar(factor1, factor2)
					CALL multiplicar
					MOV A,(producto)
					MOV (var5),A

					// var3 = I * size
					MOV A,(I)
					MOV (factor1),A
					MOV A,(size)
					MOV (factor2),A
					CALL multiplicar
					MOV A,(producto)
					MOV (var3),A

					// var3 += J
					MOV B,(J)
					ADD A,B
					MOV (var3),A

					// matriz3[var3] +=  var5
						// var3 += dir matriz2 + size
						MOV B,(var3)
						MOV A,matriz2
						ADD A,B
						MOV B,A
						MOV A,(sqrsize)
						ADD A,B
						MOV (var3),A
						// --
					MOV A,(var5)
					ADD A,(var3)
					MOV (var3),A

					// K -= 1
					MOV A,(K)
					SUB A,1
					MOV (K),A

					// CMP K
					CMP A,FFFFh
					JEQ endK
					CMP A,0
					JGE whileK

				endK:
				// J -= 1
				MOV A,(J)
				SUB A,1
				MOV (J),A

				// CMP J
				CMP A,FFFFh
				JEQ endJ
				CMP A,0
				JGE whileJ

			endJ:
			// I -= 1
			MOV A,(I)
			SUB A,1
			MOV (I),A

			// CMP I
			CMP A,FFFFh
			JEQ endI
			CMP A,0
			JGE whileI

		endI:

		// Copiar matriz3 en matriz2
		copiar3en2:
			MOV A,0
			MOV (i),A

			copy23:
				MOV B,matriz2
				ADD A,B
				MOV B,A
				MOV (var2),B

				MOV A,matriz2
				ADD A,(sqrsize)
				ADD A,(i)
				MOV B,A
				MOV B,(B)
				MOV A,B
				MOV B,(var2)
				MOV (B),A

				MOV A,(i)
				ADD A,1
				MOV (i),A
				CMP A,(sqrsize)
				JNE copy23

		// var3 = ind_origin*size
		MOV A,(indice_origin)
		MOV (factor1),A
		MOV A,(size)
		MOV (factor2),A
		CALL multiplicar
		MOV A,(producto)
		MOV (var3),A

		// var3 += ind_end
		MOV B, (indice_end)
		ADD A,B
		MOV (var3),A

		// var3 += dir matriz2
		MOV B,A
		MOV A,matriz2
		ADD A,B
		MOV (var3),A

		// if matriz2[var3] == 1: ...
		MOV B,(var3)
		MOV A,(B)
		CMP A,1
		JNE saltarhaypath

		haypath2:
			MOV A,1
			MOV (path),A
			JMP end

		saltarhaypath:
			// contador_general -= 1
			MOV A,(contador_general)
			SUB A,1
			MOV (contador_general),A

			// CMP contador_general
			CMP A,0
			JGT whilegeneral

			// CMP path
			MOV A,(path)
			CMP A,0
			JEQ haypath2


// END
end:








